// Прототипы и наследование

// Прототипом может выступать только объект, нельзя переопределять переменные (например b = 5), будет undefined. Круговые зависимости (a -> b -> c -> и т.д.) делать нельзя - ошибка

// Родитель a
let a = {
  'text': 'Hello',
  'color': 'red',
  'bold': true
}

// расширила класс b за счет а, и все сво-ва, которые есть в а доступны в b и ими можно манипулировать так, будто эти свойства из а находятся в b 
let b = {
  'fontSize': '24px',
  __proto__: a // Наследуем все из объекта а
}

b.text = 'one';
console.log(b.text); // перезаписывает св-во
console.log(a.text); // не перезаписывает св-во

let c = {
  'fontFamily': 'Verdana',
  __proto__: b // Наследуем все из объекта а и b
}

// hasOwnProperty метод, который проверяет, что находится в объекте, возвращает true или false
c.hasOwnProperty('bold') // false
